<?xml version='1.0' encoding='UTF-8'?>
<odoo>
  <record id="studio_customization.add_transaction_stag_67daf35a-52a5-447f-98f8-689390b22ad7" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}
order_txn_line = env['stock.transfer.txn.line']
wh_txn_id = env['stock.transfer.exception.type'].search([('location_src_id','=',record.location_src_id.id)])
if record.stock_transfer_txn_line:
  for txn in record.stock_transfer_txn_line:
    txn.unlink()
if record.order_stage_ids:
  for stage in record.order_stage_ids:
    stage.unlink()
for txn in record.transfer_exception_type_ids:
  if txn.id:
    order_txn_line.create({
      'transfer_exception_type_id': txn.id,
      'txn_action': 'open',
      'stock_transfer_order_id': record.id,
    })
  

]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="de_stock_material_transfer_approvals.model_stock_transfer_order"/>
    <field name="name">Add Transactions</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.add_transaction_stag_8aeb047d-a354-42ab-805c-d0ddf0423ca4" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}
order_txn_line = env['stock.transfer.txn.line']

wh_txn_id = env['stock.transfer.exception.type'].search([('transfer_order_type_ids','=',record.transfer_order_type_id.id),('transfer_order_category_ids','=',record.transfer_order_category_id.id),('stage_auto_apply','=',True)],limit=1)
if wh_txn_id:
  order_txn_line.create({
      'transfer_exception_type_id': wh_txn_id.id,
      'txn_action': 'open',
      'stock_transfer_order_id': record.id,
    })]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="de_stock_material_transfer_approvals.model_stock_transfer_order"/>
    <field name="name">Add Transaction Automatically</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.add_transaction_stag_9cec0d24-d319-4357-a960-ce51eb531489" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}
order_txn_line = env['stock.transfer.txn.line']

wh_txn_id = env['stock.transfer.exception.type'].search([('location_src_id','=',record.location_src_id.id),('transfer_order_type_ids','=',record.transfer_order_type_id.id)],limit=1)
#raise Warning(('warehouse = %s .') % (env.context.get('location_src_id')))
if wh_txn_id:
  order_txn_line.create({
      'transfer_exception_type_id': wh_txn_id.id,
      'txn_action': 'open',
      'stock_transfer_order_id': record.id,
    })]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="de_stock_material_transfer_approvals.model_stock_transfer_order"/>
    <field name="name">Add Transaction Stages automatically on draft stage</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.add_transaction_stag_dc10643c-f01a-4fc5-996a-99e814720748" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}
total = 0
#txn_count = env['stock.transfer.exception.type'].search_count([('transfer_order_category_ids','=',record.transfer_order_category_id.id),('apply_stage_id','=',record.prv_stage_id.id)])
#if record.stage_id.allow_transactions:
  #if txn_count > 0:
    #if len(record.transfer_exception_type_ids.filtered(lambda r: r.apply_stage_id.id == record.prv_stage_id.id)) == 0:
      #raise Warning(('Please select any of exception on %s') % (record.prv_stage_id.name))
    #raise Warning(('Please select any of the exception.'))

#for txn in record.transfer_exception_type_ids:
  #if txn.id:
if len(record.transfer_exception_type_ids.filtered(lambda r: r.apply_stage_id.id == record.stage_id.id)) > 1:
  raise Warning(('You cannot select multiple exceptions simultanously.'))

order_txn_line = env['stock.transfer.txn.line']
if record.stock_transfer_txn_line:
  for txn in record.stock_transfer_txn_line:
    txn.unlink()
if record.order_stage_ids:
  for stage in record.order_stage_ids:
    stage.unlink()

for txn in record.transfer_exception_type_ids:
  if txn.id:
    order_txn_line.create({
      'transfer_exception_type_id': txn.id,
      'txn_action': 'open',
      'stock_transfer_order_id': record.id,
    })
    
#*************************************Add Transaction for Warehouse****************************
wh_txn_id = env['stock.transfer.exception.type'].search([('location_src_id','=',record.location_src_id.id),('transfer_order_type_ids','=',record.transfer_order_type_id.id)],limit=1)
#raise Warning(('warehouse = %s .') % (env.context.get('location_src_id')))
if record.transfer_order_category_id.code != 'AM':
  if wh_txn_id:
    order_txn_line.create({
      'transfer_exception_type_id': wh_txn_id.id,
      'txn_action': 'open',
      'stock_transfer_order_id': record.id,
    })
#*************************************Add Auto Generate Transaction****************************
wh_txn_id = env['stock.transfer.exception.type'].search([('transfer_order_type_ids','=',record.transfer_order_type_id.id),('transfer_order_category_ids','=',record.transfer_order_category_id.id),('stage_auto_apply','=',True)],limit=1)
if wh_txn_id:
  order_txn_line.create({
      'transfer_exception_type_id': wh_txn_id.id,
      'txn_action': 'open',
      'stock_transfer_order_id': record.id,
    })
    
#*************************************Add Auto Generate Transaction for Asset Category****************************
asset_txn_id = env['stock.transfer.exception.type'].search([('transfer_order_type_ids','=',record.transfer_order_type_id.id),('transfer_order_category_ids','=',record.transfer_order_category_id.id),('code','=','AS2')],limit=1)
#asset_txn_id = env['stock.transfer.exception.type']
if asset_txn_id:
  for line in record.stock_transfer_order_line:
    if line.product_id.categ_id.x_studio_asset_category:
      if not record.transfer_exception_type_ids:
        record.update({
          'transfer_exception_type_ids': [(4,asset_txn_id.id)],
        })
#if asset_txn_id:
#  order_txn_line.create({
#      'transfer_exception_type_id': asset_txn_id.id,
#      'txn_action': 'open',
#      'stock_transfer_order_id': record.id,
#    })
    
#***********************Assign Stages
stages_list = []
next_stage = prv_stage = False
for order in record:
  stage_ids = env['stock.transfer.order.stage'].search([('transfer_order_category_ids', '=', order.transfer_order_category_id.id),('transfer_order_type_ids','=',order.transfer_order_type_id.id)])
  for stage in stage_ids:
    stages_list.append({
      'stock_order_transfer_id': order.id,
      'stage_id': stage.id, 
      'sequence': stage.sequence,
      
    })
    #order.order_stage_ids.create(lines_data)
  for txn in order.stock_transfer_txn_line:
    stages_list.append({
      'stock_order_transfer_id': order.id,
      'stage_id': txn.transfer_exception_type_id.stage_id.id, 
      'sequence': txn.transfer_exception_type_id.stage_id.sequence,
      'transfer_exception_type_id': txn.transfer_exception_type_id.id,
    })
    if txn.transfer_exception_type_id.next_stage_id.id:
      stages_list.append({
        'stock_order_transfer_id': order.id,
        'stage_id': txn.transfer_exception_type_id.next_stage_id.id, 
        'sequence': txn.transfer_exception_type_id.next_stage_id.sequence,
        'transfer_exception_type_id': txn.transfer_exception_type_id.id,
      }) 
  order.order_stage_ids.sudo().create(stages_list)
  #===================================
  #++++++++Assign Next Stage++++++++++++++
  stages = env['stock.transfer.order.stage.line'].search([('stock_order_transfer_id','=', order.id)], order="sequence desc")
  for stage in stages:
    stage.sudo().update({
      'next_stage_id': next_stage,
    })
    next_stage = stage.stage_id.id
  #++++++++++++++++++++++++++++++++++++++++
  #+++++++++++Assign Previous Stage++++++++++
  stages = env['stock.transfer.order.stage.line'].search([('stock_order_transfer_id','=', order.id)], order="sequence asc")
  for stage in stages:
    stage.sudo().update({
      'prv_stage_id': prv_stage,
        
    })
    prv_stage = stage.stage_id.id
#record._compute_order_stages()]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="de_stock_material_transfer_approvals.model_stock_transfer_order"/>
    <field name="name">Transaction/Exception Management</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.add_transaction_stag_ecc2d864-ae7c-42d8-be1e-a87dec2c861e" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}
raise Warning(('warehouse = %s .') % (env.context.get('location_src_id')))


]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="de_stock_material_transfer_approvals.model_stock_transfer_order"/>
    <field name="name">to be deleted 1</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.assign_date_for_orde_6348f2b9-f539-44a8-9dd9-5d22a01f69b9" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}
edays = record.transfer_order_category_id.default_order_validity
order_deadline = to_string(datetime.now() + timedelta(edays))
record.update({
  'order_deadline': order_deadline
})

]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="de_stock_material_transfer_approvals.model_stock_transfer_order"/>
    <field name="name">Assign Date For Order Expiry</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.assign_partner_to_jo_6eb135b8-396c-4a1f-bacc-756aaf507fe2" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}

if record.picking_id:
  if not record.partner_id:
    record.update({
      partner_id: record.picking_id.partner_id,
    })

]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="account.model_account_move"/>
    <field name="name">Assign Partner to Journal Entries</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.assign_stages_for_on_105b39c0-7b95-40e0-bc64-120dd9769e7c" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}

stage_id = env['stock.transfer.order.stage'].search([('transfer_order_category_ids', '=', record.transfer_order_category_id.id),('transfer_order_type_ids','=',record.transfer_order_type_id.id),('stage_category','=','draft')],limit=1)
if not record.stage_id.transfer_order_type_ids:
  record.update({
    'stage_id': stage_id.id,
    'picking_type_id': record.transfer_order_category_id.picking_type_id.id,
  })
]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="de_stock_material_transfer_approvals.model_stock_transfer_order"/>
    <field name="name">Assign Stages for on Portal Submission</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.auto_submit_request__44d8e5fc-faea-4150-825d-dbe373f5e593" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}
#if record.custom_entry_type_id.sequence_code not in ('AB','TB','FB'):
if record.create_uid.has_group('base.group_portal'):
  #record.button_submit()
  record.update({
    'date_submit' : record.create_date,
    'stage_id' : record.stage_id.next_stage_id.id,
  })


]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="de_custom_journal_entry.model_account_custom_entry"/>
    <field name="name">Auto Submit Request for Portal user</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.automate_approval_st_ad7d8238-cd04-4f04-819c-a4a0f8bca9a1" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}

#if record.next_stage_id.x_studio_approval_automate:
  #raise Warning(('You can not approve milestone at %s.') % (record.next_stage_id.name))

]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="project.model_project_task"/>
    <field name="name">Milestone Automate Approval Stages</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.change_status_partia_1721780e-d2a3-4791-a90e-c4fd0301fd1e" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}

dmd_qty = dlv_qty = 0
sh_stage_id = env['stock.transfer.order.stage'].search([('transfer_order_type_ids','=',record.picking_id.stock_transfer_order_id.id),('stage_code','=','SH')],limit=1)
ps_stage_id = env['stock.transfer.order.stage'].search([('transfer_order_type_ids','=',record.picking_id.stock_transfer_order_id.id),('stage_code','=','PS')],limit=1)
order_id = env['stock.transfer.order'].browse(record.picking_id.stock_transfer_order_id.id)
if record.picking_id.stock_transfer_order_id:
  for line in record.picking_id.stock_transfer_order_id.stock_transfer_order_line:
    dmd_qty += line.product_uom_qty
    dlv_qty += line.delivered_qty
  if (dmd_qty - dlv_qty) > 0:
    order_id.write({
      'stage_id': 47
    })
  elif (dmd_qty - dlv_qty) == 0:
    order_id.write({
      'stage_id': 17
    })
  

]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="stock.model_stock_move"/>
    <field name="name">Change Status Partially or fully shipped</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.create_default_analy_f5dd022f-874d-4769-9af0-d4fb4920f9b5" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}

analytic_rule_id = env['account.analytic.default'].search([('employee_id','=',record.id)],limit=1)
if record.department_id.x_studio_analytic_account_id.id:
  if analytic_rule_id:
    analytic_rule_id.update({
      'analytic_id': record.department_id.x_studio_analytic_account_id.id,
      'analytic_tag_ids': [(6, 0, record.department_id.x_studio_analytic_tag_ids.ids)],
      'department_id': record.department_id.id,
    })
  else:
    analytic_rule_id.create({
      'analytic_id': record.department_id.x_studio_analytic_account_id.id,
      'analytic_tag_ids': [(6, 0, record.department_id.x_studio_analytic_tag_ids.ids)],
      'department_id': record.department_id.id,
      'employee_id': record.id,
    })

]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="hr.model_hr_employee"/>
    <field name="name">Create Default Analytic Account</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.create_workflow_for__4f7952ba-b32b-4e20-af66-c91c083e8a61" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}

site_id = env['project.project']
if record.name == 'HOTO':
  record.update({
    'name': 'HOTO-' + record.site_id.name,
  })
stages_list = []
next_stage = prv_stage = False
if record.task_stage_ids:
  record.task_stage_ids.unlink()
for task in record:
  stage_ids = env['project.task.type'].search([('project_ids', '=', record.project_id.id)])
  for stage in stage_ids:
    stages_list.append({
      'task_id': task.id,
      'stage_id': stage.id, 
      'sequence': stage.sequence,
    
    })
  task.task_stage_ids.create(stages_list)
  #++++++++Assign Next Stage++++++++++++++
  stages = env['project.task.stage'].search([('task_id','=', record.id)], order="sequence desc")
  for stage in stages:
    stage.sudo().update({
      'next_stage_id': next_stage,
    })
    next_stage = stage.stage_id.id
            
  #+++++++++++Assign Previous Stage++++++++++
  stages = env['project.task.stage'].search([('task_id','=', record.id)], order="sequence asc")
  for stage in stages:
    stage.sudo().update({
      'prv_stage_id': prv_stage,
    })
    prv_stage = stage.stage_id.id

if record.next_stage_id.stage_category == 'close':
  if not record.date_rfi:
    record.sudo().update({
      'date_rfi': record.site_id.date_rfi #record.site_id.x_studio_date_rfi
    })
  if not record.date_onair:
    record.sudo().update({
      'date_onair': record.site_id.date_onair #record.site_id.x_studio_date_airon
    })

if record.stage_category == 'close':
  site_id = env['project.project'].search([('id','=',record.site_id.id)],limit=1)
  site_id.sudo().update({
    'x_studio_date_handedon': record.date_handover,
    'date_handover': record.date_handover,
  })
  last_site_id = env['project.contractor.line'].search([('project_id','=',record.site_id.id),('date_end','=',False),('date_start','<',record.date_handover)],limit=1)
  current_site_id = env['project.contractor.line'].search([('partner_id','=',record.partner_id.id),('project_id','=',record.site_id.id),('date_start','=',record.date_handover)], limit=1)
  if last_site_id:
    last_site_id.sudo().update({
      'date_end': record.date_handover - datetime.timedelta(1)
    })
  
  if not current_site_id:
    site_id.project_contractor_ids.sudo().create({
      'project_id': site_id.id,
      'partner_id': record.partner_id.id,
      'date_start': record.date_handover,
      #'date_end': record.date_handover,
    })
]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="project.model_project_task"/>
    <field name="name">Create workflow for HOTO Task</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.custom_entry_data_up_ffd9d6d7-c566-4ffc-9dab-71d406d78de6" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}


if record.purchase_subscription_id:
  if not record.project_id:
    record.update({
      'project_id': record.purchase_subscription_id.project_id.id,
      'analytic_account_id': record.purchase_subscription_id.x_studio_analytic_account_id.id,
    })

#if not record.analytic_account_id:
#  record.update({
#    'analytic_account_id': record.custom_entry_line_id.employee_id.department_id.x_studio_analytic_account_id,
#    'analytic_tag_ids': [(6, 0, record.custom_entry_line_id.employee_id.department_id.x_studio_analytic_tag_ids.ids)],
#  })


]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="account.model_account_move_line"/>
    <field name="name">Update Purchase Subscription</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.duplicate_project_b0819444-4d9c-4124-ab56-8a00d5378eef" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}

project_id = env['project.project'].search_count([('active','=',True),('name','=',record.name),('id','!=',record.id)])
if project_id:
  raise Warning(('Site already exists %s') % (record.name))



]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="project.model_project_project"/>
    <field name="name">Duplicate Project</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.duplication_of_descr_6ee77637-1039-4170-bf9f-c12ed790e308" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}

#status_lst = record.mapped('cash_line_ids.state')
prv_desc = env['hr.salary.advance.line']
for line in record.cash_line_ids:
  prv_desc = env['hr.salary.advance.line'].search([('advance_id','=',record.id),('id','!=',line.id)])
  for d in prv_desc:
    if line.desc == d.desc:
      raise Warning(('Duplicate descriptions found. Please provide unique description.'))
      
if record.state:
  for line in record.cash_line_ids:
    if line.total_amount != line.approved_amount:
      if line.approved:
        if record.state in ('confirmed','hr_approval'):
          if not line.remarks:
            raise Warning(('Remarks are required for difference in approved amount (%s)') % (line.name))
        elif record.state in ('finance_approval'):
          if not (line.remarks):
            if not (line.finance_remarks):
              raise Warning(('Remarks are required for difference in approved amount (%s)') % (line.name))

  
]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="de_empfin_advances.model_hr_salary_advance"/>
    <field name="name">Employee Advance Constraints</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.electricity_exceptio_38bcf7a0-f8c9-485a-a57d-f3c705c9c9f1" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}
if record.amount_total == 0:
  raise Warning(('Need to upload vendor data'))
  
for line in record.custom_entry_line:
    #exception message
    if line.meter_number or line.opening_reading > 0:
      if line.note and line.x_studio_exception == False:
        #record.update({
          #'is_custom_entry_import': True
        #})
        raise Warning(('Closed Reading or Meter Number is mimatched'))


]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="de_custom_journal_entry.model_account_custom_entry"/>
    <field name="name">Electricity Exceptions</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.electricity_update_c_0a67ae44-8a38-4de6-b45e-012d1c820c86" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}


#project_id = env['project.project'].search([('id','=',record.project_id.id)])
if record.custom_entry_id.custom_entry_type_id.sequence_code == 'EB':
  if record.id: #record.project_id.id:
    ebh = env['account.custom.entry.ebh.line'].search([('custom_entry_id','=',record.custom_entry_id.id),('project_id','=',record.project_id.id)],limit=1)
    #ebh = env['account.custom.entry.ebh.line'].search([('x_studio_custom_entry_line_id','=',record.id)],limit=1)
    #if record.custom_entry_id.stage_category == 'draft' or record.custom_entry_id.stage_id.prv_stage_id.stage_category == 'draft':
    if not record.custom_entry_id.stage_id.id or record.custom_entry_id.stage_id.id in (1,2):
      if record.id: #record.project_id.id:
        if not ebh.x_studio_custom_entry_line_id.id: #ebh.project_id.id:
          env['account.custom.entry.ebh.line'].create({
            'custom_entry_id': record.custom_entry_id.id,
            'project_id': record.project_id.id,
            'amount': record.amount_advanced,
            'x_studio_custom_entry_line_id': record.id,
          })
        else:
          ebh.update({
            'amount': record.amount_advanced,
          })
    
    else:
      if ebh.amount:
        record.update({
          'amount_advanced':ebh.amount,
        })
      elif not ebh.x_studio_custom_entry_line_id.id:
        record.update({
          'amount_advanced':0,
        })
    
    
    #if record.opening_reading != project_id.x_studio_last_reading and not record.note:
    #  record.update({
    #    'note': 'Opening Reading Mismatched'
    #  })]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="de_custom_journal_entry.model_account_custom_entry_line"/>
    <field name="name">Electricity Update Closing Readings</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.electricity_update_c_466f95aa-3506-492c-9951-493acd4359d9" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}

#Electricity advance amount consraint
ebh = env['account.custom.entry.ebh.line']
if record.custom_entry_id.custom_entry_type_id.sequence_code == 'EB':
  #ebh = env['account.custom.entry.ebh.line'].search([('x_studio_custom_entry_line_no','=',str(record.id))],limit=1)
  ebh = env['account.custom.entry.ebh.line'].search([('custom_entry_id','=',record.custom_entry_id.id),('project_id','=',record.project_id.id)],limit=1)
  if not record.custom_entry_id.stage_id.id or record.custom_entry_id.stage_id.id == 2:
    if not ebh.id:
      env['account.custom.entry.ebh.line'].create({
        'custom_entry_id': record.custom_entry_id.id,
        'project_id': record.project_id.id,
        'amount': record.amount_advanced,
        'x_studio_custom_entry_line_id': record.id,
        'x_studio_custom_entry_line_no': str(record.id)
      })
    else:
      ebh.update({
        'amount': record.amount_advanced,
      })
  else:
    if ebh.id:
      record.update({
        'amount_advanced': ebh.amount
      })
    else:
      record.update({
        'amount_advanced': 0
      })

"""
#project_id = env['project.project'].search([('id','=',record.project_id.id)])
if record.custom_entry_id.custom_entry_type_id.sequence_code == 'EB':
  if record.id: #record.project_id.id:
    #ebh = env['account.custom.entry.ebh.line'].search([('custom_entry_id','=',record.custom_entry_id.id),('project_id','=',record.project_id.id)],limit=1)
    ebh = env['account.custom.entry.ebh.line'].search([('x_studio_custom_entry_line_id','=',record.id)],limit=1)
    #if record.custom_entry_id.stage_category == 'draft' or record.custom_entry_id.stage_id.prv_stage_id.stage_category == 'draft':
    if not record.custom_entry_id.stage_id.id or record.custom_entry_id.stage_id.id in (1,2):
      if record.id: #record.project_id.id:
        if not ebh.x_studio_custom_entry_line_id.id: #ebh.project_id.id:
          env['account.custom.entry.ebh.line'].create({
            'custom_entry_id': record.custom_entry_id.id,
            'project_id': record.project_id.id,
            'amount': record.amount_advanced,
            'x_studio_custom_entry_line_id': record.id,
          })
        else:
          ebh.update({
            'amount': record.amount_advanced,
          })
    
    else:
      if ebh.amount:
        record.update({
          'amount_advanced':ebh.amount,
        })
      elif not ebh.x_studio_custom_entry_line_id.id:
        record.update({
          'amount_advanced':0,
        })
    
    
    #if record.opening_reading != project_id.x_studio_last_reading and not record.note:
    #  record.update({
    #    'note': 'Opening Reading Mismatched'
    #  })

"""]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="de_custom_journal_entry.model_account_custom_entry_line"/>
    <field name="name">Electricity Update Closing Readings - bkup copy</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.employee_advance_lin_8bd2b8e0-984a-4c42-aa84-414be0d87fb2" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}

if record.desc:
  record.update({
    'name': record.desc,
  })

]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="de_empfin_advances.model_hr_salary_advance_line"/>
    <field name="name">Employee Advance Lines Data</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.employee_cost_center_a56c5bea-1287-4310-a192-19fe19a4c6ed" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}

employee_id = env['hr.employee']

if record.hr_salary_advance_line_id.product_id.property_account_expense_id.id:
  record['account_id'] = record.hr_salary_advance_line_id.product_id.property_account_expense_id.id

if record.expense_id.product_id.property_account_expense_id.id:
  record['account_id'] = record.expense_id.product_id.property_account_expense_id.id

if not record.partner_id.id:
  record['partner_id'] = record.move_id.partner_id.id

if record.expense_id.project_id.id:
  if not record.project_id.id:
    record['project_id'] = record.expense_id.project_id.id
    
if record.hr_salary_advance_line_id.x_studio_project_id.id:
  if not record.project_id.id:
    record['project_id'] = record.hr_salary_advance_line_id.x_studio_project_id.id

if record.expense_id.id:
  record['employee_id'] = record.expense_id.employee_id.id
elif record.hr_salary_advance_line_id.id:
  record['employee_id'] = record.hr_salary_advance_line_id.employee_id.id
else:
  if record.partner_id.id:
    #employee_id = env['hr.employee'].search(['|',('address_home_id','=',record.move_id.partner_id.id),('address_home_id','=',record.partner_id.id)],limit=1)
    employee_id = env['hr.employee'].search([('address_home_id','=',record.partner_id.id)],limit=1)
    record['employee_id'] = employee_id.id
    
if not record.analytic_account_id:
  if record.account_id.internal_type not in ('receivable','payable'):
    record['analytic_account_id'] = record.employee_id.department_id.x_studio_analytic_account_id.id
    #record['analytic_account_id'] = employee_id.department_id.x_studio_analytic_account_id.id
    #record['analytic_tag_ids'] = [(4, employee_id.department_id.x_studio_analytic_tag_ids.id)]
    
if record.hr_salary_advance_line_id:
  if not record.name:
    if record.account_id.internal_type in ('payable','receivable'):
      record['name'] = record.hr_salary_advance_line_id.hr_salary_advance_id.name
      


  
]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="account.model_account_move_line"/>
    <field name="name">Advance Expense Related Updates</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.expense_approval_con_4b2d4ee8-9777-4f46-83ad-70241a7319b8" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}

if record.state: #in ('approve','exp_approve','fin_approve'):
  for line in record.expense_line_ids:
    if line.total_amount != line.amount_approved:
      if line.expense_approved:
        if record.state in ('submit','approve'):
          if not line.remarks:
            raise Warning(('Remarks are required for difference in approved amount (%s)') % (line.advance_line_id.name))
        elif record.state in ('exp_approve'):
          if not (line.remarks):
            if not (line.fin_remarks):
              raise Warning(('Remarks are required for difference in approved amount (%s)') % (line.advance_line_id.name))
          
          #elif record.state in ('exp_approve'):
            #if not line.fin_remarks:
              #raise Warning(('Financial remarks are required for difference in approved amount (%s)') % (line.advance_line_id.name))
]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="hr_expense.model_hr_expense_sheet"/>
    <field name="name">Expense Approval Constraints</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.expense_sheet_6adc4346-40dd-42b5-88e7-375af965c06c" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}

if record.hr_expense_sheet_type_id.journal_id.id:
  record['journal_id'] = record.hr_expense_sheet_type_id.journal_id.id

]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="hr_expense.model_hr_expense_sheet"/>
    <field name="name">Expense Sheet</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.expense_udpate_6d35cdc0-9f98-4193-89d0-3447400928fc" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}

if record.sheet_id:
  record.update({
    'currency_id': record.sheet_id.currency_id.id,
  })
if not record.analytic_account_id.id:
  record.update({
    'analytic_account_id': record.employee_id.department_id.x_studio_analytic_account_id.id
  })
if not record.analytic_tag_ids.id:
  record['analytic_tag_ids'] = [(4, record.employee_id.department_id.x_studio_analytic_tag_ids.id)]
  #record.write({
  #  'analytic_tag_ids': [(4,0,[record.employee_id.department_id.x_studio_analytic_tag_ids.id])]
  #})
if record.amount_approved == 0:
  record['amount_approved'] = record.total_amount

]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="hr_expense.model_hr_expense"/>
    <field name="name">Expense Udpate</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.faulty_replacement_q_f73058fc-1bd5-4f12-afac-88593c950bc8" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}
issue_qty = rtn_qty = 0
if record.transfer_order_category_id.code == 'FR':
  for line in record.stock_transfer_order_line:
    issue_qty += line.product_uom_qty
  for line in record.stock_transfer_return_line:
    rtn_qty += line.product_uom_qty
  if issue_qty != rtn_qty:
    raise Warning(('The return quantity shoud not be greater than requested quantity (%s).') % (str(issue_qty)))

]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="de_stock_material_transfer_approvals.model_stock_transfer_order"/>
    <field name="name">Faulty Replacement Quantity Check</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.fuel_product_and_qua_15e6e62d-d6ae-4d30-9cd2-614b8afd5f8b" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}

#if record.custom_entry_id.custom_entry_type_id.sequence_code == 'FF':
#  record.update({
#    'product_id': record.custom_entry_id.custom_entry_type_id.default_product_id.id,
#    'product_uom_id': record.custom_entry_id.custom_entry_type_id.default_product_id.uom_id.id,
#    'quantity': record.custom_entry_line_id.f_product_qty,
#  })
#elif record.custom_entry_id.custom_entry_type_id.sequence_code == 'FD':
#  record.update({
#    'product_id': record.custom_entry_id.custom_entry_type_id.default_product_id.id,
#    'product_uom_id': record.custom_entry_id.custom_entry_type_id.default_product_id.uom_id.id,
#    'quantity': record.custom_entry_line_id.d_product_qty,
#  })

if record.custom_entry_line_id.custom_entry_id.custom_entry_type_id.sequence_code == 'FB':
  record.update({
    'name': record.custom_entry_line_id.f_job_scope + " for " + str(record.custom_entry_line_id.custom_entry_id.f_duration_from.strftime('%d/%m/%Y')) + "-" + str(record.custom_entry_line_id.custom_entry_id.f_duration_to.strftime('%d/%m/%Y')) + ", Driver:" + record.custom_entry_line_id.x_studio_driver.name + ", Repair is done," + record.custom_entry_line_id.f_fleet_id.name 
  })
if record.custom_entry_line_id.custom_entry_id.custom_entry_type_id.sequence_code == 'TB':
  record.update({
    'name': 'Flight Ticket ' + record.custom_entry_line_id.travel_reference.name + " [Travel: " + record.custom_entry_line_id.travel_from + ' ' + record.custom_entry_line_id.travel_to + '] [Date:' + str(record.custom_entry_line_id.date_departure.strftime('%d/%m/%Y')) + "-" + str(record.custom_entry_line_id.date_arrival.strftime('%d/%m/%Y')) + ']'
  })
if record.custom_entry_line_id.custom_entry_id.custom_entry_type_id.sequence_code == 'AB':
  record.update({
    'name': 'Room charges at the ' + record.custom_entry_line_id.hotel_detail + "," + str(record.custom_entry_line_id.h_travel_id.name) + ' from' + str(record.custom_entry_line_id.h_check_in.strftime('%d/%m/%Y')) + "-" + str(record.custom_entry_line_id.h_check_out.strftime('%d/%m/%Y'))
  })

if record.custom_entry_line_id.employee_id:
  record.update({
    'employee_id': record.custom_entry_line_id.employee_id,
  })
if record.custom_entry_line_id.employee_id:
  if not record.employee_id:
    record.update({
      'employee_id': record.custom_entry_line_id.employee_id,
    })
if record.custom_entry_line_id.project_id:
  if not record.project_id:
    record.update({
      'project_id': record.custom_entry_line_id.project_id,
    })
if not record.analytic_account_id:
  record.update({
    'analytic_account_id': record.custom_entry_line_id.employee_id.department_id.x_studio_analytic_account_id,
    'analytic_tag_ids': [(6, 0, record.custom_entry_line_id.employee_id.department_id.x_studio_analytic_tag_ids.ids)],
  })
mon = ''
if record.custom_entry_id.custom_entry_type_id.sequence_code == 'OM':
  if record.custom_entry_id.date_entry_month == '1':
    mon = 'JAN'
  elif record.custom_entry_id.date_entry_month == '2':
    mon = 'FEB'
  elif record.custom_entry_id.date_entry_month == '3':
    mon = 'MAR'
  elif record.custom_entry_id.date_entry_month == '4':
    mon = 'APR'
  elif record.custom_entry_id.date_entry_month == '5':
    mon = 'MAY'
  elif record.custom_entry_id.date_entry_month == '6':
    mon = 'JUN'
  elif record.custom_entry_id.date_entry_month == '7':
    mon = 'JUL'
  elif record.custom_entry_id.date_entry_month == '8':
    mon = 'AUG'
  elif record.custom_entry_id.date_entry_month == '9':
    mon = 'SEP'
  elif record.custom_entry_id.date_entry_month == '10':
    mon = 'OCT'
  elif record.custom_entry_id.date_entry_month == '11':
    mon = 'NOV'
  elif record.custom_entry_id.date_entry_month == '12':
    mon = 'DEC'
    
  if record.move_id.journal_id.type == 'general':
    if not record.partner_id:
      record.update({
        'partner_id': record.custom_entry_id.partner_id.id,
      })
    record.update({
      'name': 'OM Service Charges for ' + mon + ':' + record.custom_entry_id.date_entry_year,
    })
    if record.account_id.id == record.custom_entry_id.custom_entry_type_id.counterpart_account_id.id:
      record.update({
        'project_id': False,
      })
]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="account.model_account_move_line"/>
    <field name="name">Custom Entry Data Update</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.generate_name_automa_1261f26f-4f15-441b-8d8b-b4cb34731a37" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}

record.update({
  'name': record.x_studio_msa_id.name + '-' + record.x_studio_project_id.name + '-' + record.x_studio_load + '-' + record.x_studio_period 
})

]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="studio_customization.monthly_tower_load_200deabd-8dfe-4ed0-84cc-a17b2ad82cb5"/>
    <field name="name">Generate Name Automatically</field>
    <field name="sequence">5</field>
    <field name="state">object_write</field>
  </record>
  <record id="studio_customization.generate_name_automa_1542ff26-0dc0-4cc7-8ba7-6273ff4a64b0" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}

record.update({
  'name': record.x_studio_msa_id.name + '-' + record.x_studio_project_id.name + '-' + record.x_studio_load + '-' + record.x_studio_period 
})

]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="studio_customization.monthly_power_model_fdebe644-cebf-429d-8dbf-dcb28ff1d804"/>
    <field name="name">Generate Name Automatically for Monthly Power</field>
    <field name="sequence">5</field>
    <field name="state">object_write</field>
  </record>
  <record id="studio_customization.generate_name_automa_5f5dfb2c-44f8-4f31-be12-c5b1f963d2c4" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}

record.update({
  'name': record.x_studio_msa_id.name + '-' + record.x_studio_project_id.name + '-' + record.x_studio_load + '-' + record.x_studio_period 
})

]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="studio_customization.monthly_tower_model_a08272a1-5cb1-4c13-a526-1c2a2f7119d7"/>
    <field name="name">Generate Name Automatically for Monthly Tower</field>
    <field name="sequence">5</field>
    <field name="state">object_write</field>
  </record>
  <record id="studio_customization.generate_penalty_on__f3700c61-f67c-4936-951a-9fb5973ddfae" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}
lines_data = []
custom_entry_type_id = env['account.custom.entry.type'].search([('sequence_code','=','SP')],limit=1)

for line in record.stock_transfer_order_line:
  lines_data.append([0,0,{
    'sp_life_time': record.partner_id.id,
    'project_id': line.project_id.id,
    'sp_date_onair': line.project_id.date_onair,
    'sp_date_delivery_deadline': record.delivery_deadline,
    'sp_date_return_deadline': record.return_deadline,
    'sp_date_delivered': record.date_delivered,
    'sp_date_returned': record.date_returned,
    'sp_used_life': 99,
    'sp_cost': line.product_id.standard_price,
    'sp_back_charges': line.product_id.standard_price,
    'amount_penalty': line.product_id.standard_price,
    'product_id': custom_entry_type_id.default_product_id.id,
    'product_uom_id': custom_entry_type_id.default_product_id.uom_id.id,
    'product_qty': 1,
    'price_unit': line.product_id.standard_price,
  }])
penalty_count = env['account.custom.entry'].search_count([('stock_transfer_order_id','=',record.id)])
if not penalty_count > 0:
  penalty_id = env['account.custom.entry'].create({
    'partner_id': record.partner_id.id,
    'stock_transfer_order_id': record.id,
    'ref': record.name,
    'custom_entry_type_id': custom_entry_type_id.id,
    'currency_id': custom_entry_type_id.currency_id.id,
    'date_entry': datetime.datetime.now(),
    'user_id': record.user_id.id,
    'custom_entry_line':lines_data,
  })

]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="de_stock_material_transfer_approvals.model_stock_transfer_order"/>
    <field name="name">Generate Penalty on Auto Close</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.grn_and_invoice_reje_a94d93a7-6130-4e9c-8197-75c625e73f66" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}
if record.is_return:
  if not record.task_id:
    record['task_id'] = record.origin_picking_id.task_id.id
]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="stock.model_stock_picking"/>
    <field name="name">GRN Return Milestone Assignment</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.grn_and_invoice_reje_c5892e0d-b259-45d8-9a4a-22827f950777" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}
stage_id = env['project.task.type'].search([('stage_code','=','SIR')],limit=1)
if record.is_return:
  record.origin_picking_id.task_id['stage_id'] = stage_id.id

]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="stock.model_stock_picking"/>
    <field name="name">GRN and Invoice Rejection</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.lease_data_e259403c-b8cc-4c0a-855a-364156e9bf92" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}
subscription_line = env['purchase.subscription.line']
if record.product_id:
  if record.purchase_subscription_line:
    for line in record.purchase_subscription_line:
      line.update({
        'product_id': record.product_id.id,
        'price_unit': record.amount_lease_original,
      })
  else:
    subscription_line.create({
      'purchase_subscription_id': record.id,
      'product_id':record.product_id.id,
      'name': record.product_id.name,
      'uom_id': record.product_id.uom_id.id,
      'quantity':1,
      'price_unit': record.amount_lease_original,
    })

if record.adj_purchase_subscription_id:
  record.update({
    'name': str(record.adj_purchase_subscription_id.name) + '-' + str(record.adj_purchase_subscription_id.adj_no),
  })
]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="de_purchase_subscription.model_purchase_subscription"/>
    <field name="name">Lease Data</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.milestone_approvals__4614050d-0281-456d-a4af-6d513e6bd769" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}

tasks = env['project.task'].search([('id','!=',record.id),('delivery_assigned','!=',True),('purchase_id','=',record.purchase_id.id),('stage_id.is_closed','!=',True)])
if record.purchase_id:
  for task in tasks:
    if task.stage_category not in ('draft'):
      if task.task_sequence < record.task_sequence:
        raise Warning(('You can not approve milestone before %s.') % (task.name))


]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="project.model_project_task"/>
    <field name="name">Milestone Approvals in Sequence Constraints</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.milestone_invoices_7f82834c-e951-4a8c-bf68-bf0d59851aef" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}
account_id = env['account.account'].search([('code','=','209000')],limit=1)
if record.move_id.task_id.id:
  if record.product_id.id:
    record.update({
      'account_id':account_id.id,
    })


]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="account.model_account_move_line"/>
    <field name="name">Milestone Invoices</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.milestone_invoices_d_7dc78348-eb97-41dc-8255-0fad363866e5" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}
expense_sheet_id = env['hr.expense.sheet'].search([('account_move_id','=',record.id)],limit=1)
if expense_sheet_id:
  expense_sheet_id['state'] = 'done'
  for line in expense_sheet_id.expense_line_ids:
    line['state'] = 'done'


]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="account.model_account_move"/>
    <field name="name">Expense Invoice Status Paid</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.milestone_invoices_d_e2e81acd-87ae-47ca-975d-51e7d3baafd4" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}

if record.picking_id.task_id.id:
  if not record.task_id:
    record.update({
      'task_id': record.picking_id.task_id.id,
    })
if record.picking_id.purchase_id.id:
  if not record.milestone_purchase_id:
    record.update({
      'milestone_purchase_id': record.picking_id.purchase_id.id,
    })

task_id = env['project.task']
#if record.state == 'posted':
#  if record.payment_state == 'paid':
if record.task_id:
  task_id = env['project.task'].search([('id','=',record.task_id.id)])
  task_id.update({
    'stage_id': task_id.next_stage_id.id,
    
  })


]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="account.model_account_move"/>
    <field name="name">Milestone Invoices Data Update</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.milestone_invoices_d_fa015d06-359d-49f6-aa03-c0e07da57f94" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}

if record.custom_entry_id.supplier_bill_ref:
  bill_id = env['account.move'].search([('ref','=',record.custom_entry_id.supplier_bill_ref)],limit=1)
  if record.move_type == 'in_invoice':
    if bill_id:
      record.update({
        'ref': record.custom_entry_id.supplier_bill_ref + '-' + str(record.id),
      })
    else:
      record.update({
        'ref': record.custom_entry_id.supplier_bill_ref,
      })
  elif record.move_type == 'in_refund':
    record.update({
        'ref': record.custom_entry_id.crn_ref,
      })

mon = ''
if record.custom_entry_id.custom_entry_type_id.sequence_code == 'OM':
  if record.custom_entry_id.date_entry_month == '1':
    mon = 'JAN'
  elif record.custom_entry_id.date_entry_month == '2':
    mon = 'FEB'
  elif record.custom_entry_id.date_entry_month == '3':
    mon = 'MAR'
  elif record.custom_entry_id.date_entry_month == '4':
    mon = 'APR'
  elif record.custom_entry_id.date_entry_month == '5':
    mon = 'MAY'
  elif record.custom_entry_id.date_entry_month == '6':
    mon = 'JUN'
  elif record.custom_entry_id.date_entry_month == '7':
    mon = 'JUL'
  elif record.custom_entry_id.date_entry_month == '8':
    mon = 'AUG'
  elif record.custom_entry_id.date_entry_month == '9':
    mon = 'SEP'
  elif record.custom_entry_id.date_entry_month == '10':
    mon = 'OCT'
  elif record.custom_entry_id.date_entry_month == '11':
    mon = 'NOV'
  elif record.custom_entry_id.date_entry_month == '12':
    mon = 'DEC'
  
  if record.journal_id.type == 'general':
    record.update({
      'ref': 'Accrued charges of ' + record.custom_entry_id.partner_id.name + ' for ' + mon + ':' + record.custom_entry_id.date_entry_year,
    })
  #if record.journal_id.type == 'purchase':
  if record.move_type == 'in_invoice':
    record.update({
    'x_studio_source_document':  mon + ':' + record.custom_entry_id.date_entry_year + ' Payment: ' + str(record.custom_entry_id.om_amount_adv_current_per) + ' of total: ' + str(record.custom_entry_id.om_amount_total_per) + '%',
  })
  
#Update Fuel Date
if record.custom_entry_id.custom_entry_type_id.sequence_code == 'FF' or record.custom_entry_id.custom_entry_type_id.sequence_code == 'FD':
  record.custom_entry_id.update({
    'stage_id': 13
  })
]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="account.model_account_move"/>
    <field name="name">Custom Entries Invoice Update</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.milestone_picking_da_9f500b9c-e75e-4f34-a928-a498f4d45cc5" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}
task_id = env['project.task']
lines_data = []
account_id = env['account.account']
move_id = env['account.move']
partner_id = env['res.partner']
acc_debit_bal = acc_credit_bal = debit = credit = 0
journal_id = env['account.journal'].search([('code','=','STJ')],limit=1)
counterpart_account_id = env['account.account'].search([('code','=','209000')],limit=1)
stage_id = env['project.task.type']

if record.is_return:
  record['task_id'] = False
if record.state == 'done':
  if record.is_return:
    stage_id = env['project.task.type'].search([('name','=','Invoice Rejected'),('allow_milestone','=',True)],limit=1)
    record.origin_picking_id.task_id.update({
      'stage_id': stage_id.id,
    })
  else:
    if record.purchase_id.task_ids:
      if not record.task_id.id:
        raise Warning(('You can not validate %s with milestone.') % (record.name))
      else:
        task_id = env['project.task'].search([('id','=',record.task_id.id)])
        task_id.update({
          'stage_id': task_id.next_stage_id.id,
        })
  if record.task_id.id or record.origin_picking_id.task_id.id:
    for line in record.move_lines:
      
      if line.product_id.property_account_expense_id:
        account_id = line.product_id.property_account_expense_id
      else:
        account_id = line.product_id.categ_id.property_account_expense_categ_id
      
      if record.is_return:
        debit = 0
        credit = line.purchase_line_id.price_unit * line.quantity_done
        acc_debit_bal += line.purchase_line_id.price_unit * line.quantity_done
        acc_credit_bal = 0
      else:
        debit = line.purchase_line_id.price_unit * line.quantity_done
        credit = 0
        acc_debit_bal = 0
        acc_credit_bal += line.purchase_line_id.price_unit * line.quantity_done
        
      #acc_bal += line.purchase_line_id.price_unit * line.quantity_done
      lines_data.append([0,0,{
        'name': str(line.product_id.name) + ' ' ,
        #'custom_entry_line_id': line.id,
        'account_id': account_id.id,
        #'amount_currency': amount,
        'currency_id': record.purchase_id.currency_id.id,
        'debit': debit,
        'credit': credit,
        'partner_id': record.purchase_id.partner_id.id,
        'quantity': line.quantity_done,
        'product_uom_id': line.product_uom.id,
        'product_id': line.product_id.id,
        'analytic_account_id': line.purchase_line_id.account_analytic_id.id,
        'analytic_tag_ids': [(6, 0, line.purchase_line_id.analytic_tag_ids.ids)],
        'project_id': line.purchase_line_id.project_id.id,
      }])
    lines_data.append([0,0,{
        'name': str(line.product_id.name) + ' ' ,
        #'custom_entry_line_id': line.id,
        'account_id': counterpart_account_id.id,
        'amount_currency': 0,
        'currency_id': record.purchase_id.currency_id.id,
        'debit': acc_debit_bal,
        'credit': acc_credit_bal,
        'partner_id': record.purchase_id.partner_id.id,
        #'quantity': line.quantity_done,
        #'product_uom_id': line.product_uom.id,
        #'product_id': line.product_id.id,
        #'analytic_account_id': line.purchase_line_id.account_analytic_id.id,
        #'analytic_tag_ids': [(6, 0, line.purchase_line_id.analytic_tag_ids.ids)],
        #'project_id': line.purchase_line_id.project_id.id,
    }])
    if not record.x_studio_accrued_move_id:
      move_id = env['account.move'].create({
        'move_type': 'entry',
        'milestone_purchase_id': record.purchase_id.id,
        'ref':  str(record.name), 
        'date': record.scheduled_date,
        'currency_id': record.purchase_id.currency_id.id,
        'journal_id': journal_id.id,
        'narration': record.name,
        'partner_id': record.partner_id.id,
        'line_ids':lines_data,
      })
      move_id.sudo().action_post()
      record.update({
        'x_studio_accrued_move_id': move_id.id,
      })

]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="stock.model_stock_picking"/>
    <field name="name">Milestone Picking Data</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.milestone_task_stage_3c803937-6d2f-4b61-b409-ced5655f8d67" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}
current_stage_id = env['project.task.type'].search([('stage_code','=','SIR')],limit=1)
submit_stage_id = env['project.task.type'].search([('stage_code','=','SIS')],limit=1)
if record.is_purchase_attachment:
  if current_stage_id:
    record.sudo().update({
      'stage_id': submit_stage_id.id,
      'is_purchase_attachment': False,
    })
  else:
    record.sudo().update({
      'stage_id': record.next_stage_id.id,
      'is_purchase_attachment': False,
    })

]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="project.model_project_task"/>
    <field name="name">Milestone Task stage update after vendor submission</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.milestone_task_stage_fac22481-0cf0-46be-b352-874f2cb2f045" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}
current_stage_id = env['project.task.type'].search([('stage_code','=','SIR')],limit=1)
submit_stage_id = env['project.task.type'].search([('stage_code','=','SIS')],limit=1)
if record.is_purchase_attachment:
  if current_stage_id:
    record.sudo().update({
      'stage_id': submit_stage_id.id,
      'is_purchase_attachment': False,
    })
  else:
    record.sudo().update({
      'stage_id': record.next_stage_id.id,
      'is_purchase_attachment': False,
    })
  if record.picking_id:
    new_picking_id = env['stock.picking'].copy(record.picking_id)

]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="project.model_project_task"/>
    <field name="name">Milestone Task stage update after vendor submission on change</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.milestone_task_updat_4a0d915c-6f64-46aa-b3b0-3d43f41fdeee" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}
project_id = env['project.project']
if record.purchase_id:
  user_id = env['res.users'].search([('partner_id','=',record.partner_id.id)],limit=1)
  user_project = env['project.project'].search([('id','=',record.project_id.id),('allowed_portal_user_ids','=',user_id.id)],limit=1)
  project_id = env['project.project'].search([('id','=',record.project_id.id)])
  if not user_project:
    project_id.update({
      'allowed_portal_user_ids': [(4, user_id.id)],#[(6, 0, line.analytic_tag_ids.ids)],
    })
  #if record.is_purchase_attachment:
    #record.sudo().update({
      #'stage_id': record.next_stage_id.id,
    #})
  if record.stage_id.submission_type == '0':
    record.update({
      'is_purchase_attachment': False,
    })

]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="project.model_project_task"/>
    <field name="name">Milestone Task Updates</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.payment_8ef4829c-daba-4187-8b79-ab3f4437571d" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}

payment_display_name = {
                'outbound-customer': ("Customer Reimbursement"),
                'inbound-customer': ("Customer Payment"),
                'outbound-supplier': ("Vendor Payment"),
                'inbound-supplier': ("Vendor Reimbursement"),
            }
default_line_name = env['account.move.line']._get_default_line_name(("Internal Transfer") if record.is_internal_transfer else payment_display_name['%s-%s' % (record.payment_type, record.partner_type)], record.amount, record.currency_id, record.date, partner=record.partner_id,)

if record.payment_type == 'transfer':
  liquidity_line_name = _('Transfer to %s') % record.destination_journal_id.name
else:
  liquidity_line_name = record.name
                
for line in record.move_id.line_ids:
  if record.move_id.journal_id.type in ('cash','bank'):
    if not record.name or record.name == '/':
    #if record.account_id.internal_type in ('payable','receivable'):
      line['name'] = default_line_name
      #line['ref'] = liquidity_line_name
    #if not record.ref or record.ref == '/':
    #if not line.ref:
      #line['ref'] = liquidity_line_name

]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="account.model_account_payment"/>
    <field name="name">Payment</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.penalty_invoices_ser_92e6de94-b0c9-40b4-98f0-c06dec2e37d0" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}
if record.x_studio_remarks:
  record.update({
    'note': record.x_studio_remarks,
  })
if record.x_studio_employee_id:
  record.update({
    'employee_id': record.x_studio_employee_id.id,
  })]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="de_custom_journal_entry.model_account_custom_entry_line"/>
    <field name="name">Custom Entry Lines Common Updates</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.penalty_invoices_ser_c55ec10c-c4e4-48a9-a21e-2d98317b8af7" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}
entry_line_id = env['account.custom.entry.line']
om_entry_id = env['account.custom.entry'].search([('partner_id','=',record.custom_entry_id.partner_id.id),('date_entry_month','=',record.custom_entry_id.date_entry_month),('custom_entry_type_id.sequence_code','=','OM'),('date_entry_year','=',record.custom_entry_id.date_entry_year)],limit=1)
sla_entry_id = env['account.custom.entry'].search([('partner_id','=',record.custom_entry_id.partner_id.id),('date_entry_month','=',record.custom_entry_id.date_entry_month),('custom_entry_type_id.sequence_code','=','SLA'),('date_entry_year','=',record.custom_entry_id.date_entry_year)],limit=1)
pm_entry_id = env['account.custom.entry'].search([('partner_id','=',record.custom_entry_id.partner_id.id),('date_entry_month','=',record.custom_entry_id.date_entry_month),('custom_entry_type_id.sequence_code','=','PM'),('date_entry_year','=',record.custom_entry_id.date_entry_year)],limit=1)

penalty_line_id = env['account.custom.entry.line']

occur_entry_ids = env['account.custom.entry'].search([('partner_id','=',record.custom_entry_id.partner_id.id),('custom_entry_type_id','=',record.custom_entry_id.custom_entry_type_id.id)])

penalty_config_id = env['op.penalty.config'].search([('partner_id','=',record.custom_entry_id.partner_id.id),('custom_entry_type_id','=',record.custom_entry_id.custom_entry_type_id.id)],limit=1)
sow_id = env['op.penalty.config.sow.line']
occur_id = env['op.penalty.config.occur.line']
sla_id = env['op.penalty.config.line']

penalty_amount = occur = 0
occur_entry_count = 0
factor = 1

#if record.custom_entry_id.custom_entry_type_id.move_type in ('in_refund','out_refund'):
if record.custom_entry_id.stage_category != 'closed' and record.custom_entry_id.custom_entry_type_id.move_type in ('in_refund','out_refund'):
  if record.project_id:
    entry_line_id = env['account.custom.entry.line'].search([('project_id','=',record.project_id.id),('custom_entry_id','=',om_entry_id.id)],limit=1)
    record.update({
      'x_studio_om_service_charges': entry_line_id.o_final_amount,
      'om_service_charges': entry_line_id.o_final_amount,
      #'note': om_entry_id.name,
    })
  for entry in occur_entry_ids.custom_entry_line.filtered(lambda s: s.project_id.id == record.project_id.id):
    occur += 1
  if record.custom_entry_id.custom_entry_type_id.sequence_code == 'HSE':
    occur_entry_count = env['account.custom.entry.line'].search_count([('project_id','=',record.project_id.id),('custom_entry_id.partner_id','=',record.custom_entry_id.partner_id.id),('custom_entry_id.x_studio_entry_sequence','=','HSE')])
    #for pline in penalty_config_id.penalty_config_occur_line:
    entry_line_id = env['account.custom.entry.line'].search([('project_id','=',record.project_id.id),('custom_entry_id.partner_id','=',record.custom_entry_id.partner_id.id),('custom_entry_id.x_studio_entry_sequence','=','HSE'),('custom_entry_id','!=',record.custom_entry_id.id)],order="x_studio_entry_line_count desc",limit=1)
    if record.x_studio_entry_line_count == 0 or not record.x_studio_entry_line_count:
      record.update({
        'x_studio_entry_line_count': entry_line_id.x_studio_entry_line_count+1,
      })
    occur_id = env['op.penalty.config.occur.line'].search([('occurence','=',record.x_studio_entry_line_count),('partner_id','=',record.custom_entry_id.partner_id.id)],limit=1)
    #if pline.occurence == occur:
    penalty_amount = occur_id.penalty_amount
    #break
    if record.amount_penalty == 0:
      record.update({
        'amount_penalty': penalty_amount,
        'price_unit': record.amount_approved_penalty,
      })
    record.update({
      'price_unit': record.amount_approved_penalty,
    })
  elif record.custom_entry_id.custom_entry_type_id.sequence_code == 'PM':
    penalty_line_id = env['account.custom.entry.line'].search([('project_id','=',record.project_id.id),('custom_entry_id','=',sla_entry_id.id)],limit=1)
    #for pline in penalty_config_id.penalty_config_sow_line:
    sow_id = env['op.penalty.config.sow.line'].search([('penalty_sow_id.id','=',record.penalty_sow_id.id),('partner_id','=',record.custom_entry_id.partner_id.id)],limit=1)
      #if pline.penalty_sow_id.id == record.penalty_sow_id.id:
    if record.sow_deduct_type == 'a':
      penalty_amount = (sow_id.penalty_deduction_a / 100) * record.x_studio_om_service_charges
    else:
      penalty_amount = (sow_id.penalty_deduction_b / 100) * record.x_studio_om_service_charges
    record.update({
      'amount_penalty': penalty_amount,
      'price_unit': record.amount_approved_penalty,
    })
   
  elif record.custom_entry_id.custom_entry_type_id.sequence_code == 'SLA':
    penalty_line_id = env['account.custom.entry.line'].search([('project_id','=',record.project_id.id),('custom_entry_id','=',pm_entry_id.id)],limit=1)
    sla_id = env['op.penalty.config.line'].search([('partner_id','=',record.custom_entry_id.partner_id.id),('service_class','=',record.service_class),('uptime_from','<=',record.uptime),('uptime_to','>=',record.uptime)],limit=1)
    penalty_amount = (sla_id.penalty_deduction_per / 100) * record.om_service_charges
    pre_sla_penalty = datetime.datetime.today()
    entry_penalty_count = 0
    for pre_penalty_month in range(10):
      sla_penalty_bill = env['account.custom.entry.line'].search([('project_id','=',record.project_id.id),('custom_entry_id.date_entry_year','=',record.custom_entry_id.date_entry_year),('custom_entry_id.date_entry_month','=',(int(record.custom_entry_id.date_entry_month)-(pre_penalty_month))),('custom_entry_id.partner_id','=',record.custom_entry_id.partner_id.id)])
      if sla_penalty_bill:
        entry_penalty_count += 1
      if not sla_penalty_bill:
        break
    #raise UserError(str(entry_penalty_count)) 
    if entry_penalty_count > 1:
      if record.service_level in ('critical','major'):
        factor = 2
      else:
        factor = 1
    record.update({
      'amount_penalty': penalty_amount * factor, # * entry_penalty_count,
      'price_unit': record.amount_approved_penalty,
      'service_level':sla_id.service_level,
      'x_studio_entry_line_count': entry_penalty_count,
    })
  elif record.custom_entry_id.custom_entry_type_id.sequence_code == 'FP':
    record.update({
      'product_id': record.custom_entry_id.custom_entry_type_id.default_product_id.id,
      'product_uom_id':record.custom_entry_id.custom_entry_type_id.default_product_id.uom_id.id,
      'amount_penalty': record.price_subtotal,
    })
  elif record.custom_entry_id.custom_entry_type_id.sequence_code == 'PNR':
    record.update({
      'price_unit': record.x_studio_pr_price_unit,
      'x_studio_pr_subtotal':record.price_subtotal,
      
    })
  if record.amount_approved_penalty == 0:
    record.update({
        'amount_approved_penalty': record.amount_penalty,
      
    })
  ]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="de_custom_journal_entry.model_account_custom_entry_line"/>
    <field name="name">Penalty Invoices (Service Charges)</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.purchase_order_refer_d9983e8c-bf07-4c50-8955-e74b24af6c1b" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}
purchase_id = env['purchase.order'].search([('invoice_ids','in',record.move_id.id)])
if record.account_id.internal_type == 'payable':
  for purchase in purchase_id:
    record.update({
      'name': record.move_id.name + ' ' + purchase.name
    })


]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="account.model_account_move_line"/>
    <field name="name">Purchase Order Reference on Vendor Bill</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.restrict_deletion_at_abc74b33-45d3-4403-803c-f502922242fb" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}

if record.custom_entry_id.stage_category != 'draft':
  raise Warning(('Submitted or approved Lines cannot be delete'))

]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="de_custom_journal_entry.model_account_custom_entry_line"/>
    <field name="name">Restrict Deletion at Entry Line</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.restrict_product_dup_063d36f4-74a8-40b0-853c-9d1f94dae0b3" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}
ex_product_name = env['product.template'].search([('id','!=',record.id),('name','=',record.name),('active','=',True)],limit=1).name
ex_product_code = env['product.template']
if ex_product_name:
  raise Warning(('Duplicate product name found (%s).') % (record.name))
else:
  ex_product_code = env['product.template'].search([('id','!=',record.id),('default_code','=',record.default_code),('active','=',True)],limit=1).default_code
  #if not record.default_code:
    #raise Warning(('You can not create product without product code.'))
  if ex_product_code:
    raise Warning(('Duplicate product code found (%s).') % (record.default_code))

]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="product.model_product_template"/>
    <field name="name">Restrict Product Duplicaiton</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.restrict_product_dup_325be0da-e1ad-46d7-bcaa-50b46f7f1e21" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}
ex_location_name = env['stock.location'].search([('id','!=',record.id),('name','=',record.name),('active','=',True)],limit=1).name
if ex_location_name:
  raise Warning(('Duplicate location found (%s).') % (record.name))
]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="stock.model_stock_location"/>
    <field name="name">Restriction on Location</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.restrict_product_dup_91c54a65-f9c2-4207-881e-cbe0280466b3" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}
if record.default_code:
  if not record.x_studio_default_code1:
    record.update({
      'x_studio_default_code1': record.default_code
    })
    
if record.x_studio_default_code1:
  if not record.default_code:
    record.update({
      'default_code': record.x_studio_default_code1 + ' (copy)'
    })

]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="product.model_product_template"/>
    <field name="name">Product Copy</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.site_duplication_exc_00fe7f71-06f6-4559-a299-199d97e61a15" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}

days = exception_count = 0
old_requisition_lines = env['purchase.requisition.line']
requisition_id = env['purchase.requisition'].search([('id','=',record.requisition_id.id)])
#if record.stage_id.next_stage_id.stage_category != 'draft':
for line in record:
  #old_requisition_lines = env['purchase.requisition.line'].search([('product_id','=',line.product_id.id),('project_id','=',line.project_id.id),('requisition_id.state','not in',['draft','cancel'])])
  old_requisition_lines = env['purchase.requisition.line'].search([('requisition_id','!=',record.requisition_id.id),('product_id','=',line.product_id.id),('project_id','=',line.project_id.id),('requisition_id.state','not in',['draft','cancel'])])
  if len(old_requisition_lines):
    for oline in old_requisition_lines:
      if line.requisition_id.ordering_date and oline.requisition_id.ordering_date:
        days = (line.requisition_id.ordering_date - oline.requisition_id.ordering_date).days
        if abs(days) < 365:
          #record.update({
          #  'x_studio_site_duplication_exception': True,
          #})
          exception_count = env['purchase.requisition.line'].search_count([('requisition_id','=',record.id),('x_studio_exception_remarks','!=',False)])
          if exception_count > 0:
            requisition_id.update({
              'x_studio_allow_submission_with_exception': False,
            })
          else:
            requisition_id.update({
              'x_studio_allow_submission_with_exception': True,
            })


#requisition_id.update({
#  'x_studio_allow_submission_with_exception': False,
#})


]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="purchase_requisition.model_purchase_requisition_line"/>
    <field name="name">Site Duplication Exception Update</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.stage_change_after_a_1562fed8-6662-4646-9ed3-8351dd5f58be" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}

if record.stage_id == 14:
  record.update({
    'stage_id': record.stage_id.next_stage_id.id
  })

]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="de_custom_journal_entry.model_account_custom_entry"/>
    <field name="name">Stage Change After Accounting Entries for (FD/FF) - 2bd</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.stock_not_found_0565d6a2-91ce-47e4-a6d2-eff02d847490" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}

#-------------------------------------------------------------
# Constraint for Stock Avaialability Check
# ------------------------------------------------------------
sq_id = env['stock.quant']
avbl_qty = issue_qty = rtn_qty = 0
for line in record.stock_transfer_order_line:
  avbl_qty = 0
  quant_ids = env['stock.quant'].search([('product_id','=',line.product_id.id),('location_id','=',line.location_src_id.id)])
  avbl_qty = sum(quant_ids.mapped('available_quantity'))
  #for quant in sq_id.search([('product_id','=',line.product_id.id),('location_id','=',line.location_src_id.id)]):
    #avbl_qty += quant.available_quantity
  #issue_qty += line.product_uom_qty
  if line.product_uom_qty > avbl_qty:
    raise Warning(('The Product %s stock is equal to %s') % (line.product_id.name, str(avbl_qty)))
  if line.product_uom_qty <= 0:
    raise Warning(('The Product %s quantity cannnot be zero.') % (line.product_id.name))
    
#if record.transfer_order_category_id.action_type != 'normal':
#  if len(record.stock_transfer_return_line) or len(record.stock_transfer_return_line)>0:
#    for rline in record.stock_transfer_return_line:
#      rtn_qty += rline.product_uom_qty
#    if record.transfer_order_category_id.x_studio_allow_return_qty_diff:
#      if not issue_qty >= rtn_qty:
#        raise Warning(('The retun quantity must be equal or less than issue quantity %s') % (str(issue_qty)))
      
# if issue_qty <= 0:
#     raise Warning(('The request %s quantity cannnot be zero.') % (record.name))

#-------------------------------------------------------------
# request quantity and return quantity comparison per category
# ------------------------------------------------------------
categ_list = []
request_qty = return_qty = 0
if record.transfer_order_category_id.x_studio_allow_return_qty_diff:
  for line in record.stock_transfer_order_line:
    if line.product_id.categ_id not in categ_list:
      categ_list.append(line.product_id.categ_id)
  for categ in categ_list:
    request_qty = return_qty = 0
    for line in record.stock_transfer_order_line:
      if line.product_id.categ_id.id == categ.id:
        request_qty += line.product_uom_qty
    for line in record.stock_transfer_return_line:
      if line.product_id.categ_id.id == categ.id:
        return_qty += line.product_uom_qty
    if not request_qty >= return_qty:
      raise Warning(('The retun quantity must be equal or less than issue quantity %s') % (str(request_qty)))
    #if record.stock_transfer_return_line:
    #  if return_qty == 0:
    #    raise Warning(('The retun quantity must be equal to less than requested quantity of category %s') % (str(request_qty)))
#raise Warning(('The retun quantity cannot be greater than issue quantity %s and %s') % (str(issue_qty), str(rtn_qty)))


]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="de_stock_material_transfer_approvals.model_stock_transfer_order"/>
    <field name="name">Stock Not Found Faulty Replce for Web Only</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.stock_not_found_472df910-29d1-47ca-8dac-79f9873f2509" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}

#-------------------------------------------------------------
# Constraint for Stock Avaialability Check
# ------------------------------------------------------------
sq_id = env['stock.quant']
avbl_qty = issue_qty = rtn_qty = 0
for line in record.stock_transfer_order_line:
  avbl_qty = 0
  quant_ids = env['stock.quant'].search([('product_id','=',line.product_id.id),('location_id','=',line.location_src_id.id)])
  avbl_qty = sum(quant_ids.mapped('available_quantity'))
  #for quant in sq_id.search([('product_id','=',line.product_id.id),('location_id','=',line.location_src_id.id)]):
    #avbl_qty += quant.available_quantity
  #issue_qty += line.product_uom_qty
  if line.product_uom_qty > avbl_qty:
    raise Warning(('The Product %s stock is equal to %s') % (line.product_id.name, str(avbl_qty)))
  if line.product_uom_qty <= 0:
    raise Warning(('The Product %s quantity cannnot be zero.') % (line.product_id.name))
    
#if record.transfer_order_category_id.action_type != 'normal':
#  if len(record.stock_transfer_return_line) or len(record.stock_transfer_return_line)>0:
#    for rline in record.stock_transfer_return_line:
#      rtn_qty += rline.product_uom_qty
#    if record.transfer_order_category_id.x_studio_allow_return_qty_diff:
#      if not issue_qty >= rtn_qty:
#        raise Warning(('The retun quantity must be equal or less than issue quantity %s') % (str(issue_qty)))
      
# if issue_qty <= 0:
#     raise Warning(('The request %s quantity cannnot be zero.') % (record.name))

#-------------------------------------------------------------
# request quantity and return quantity comparison per category
# ------------------------------------------------------------
categ_list = []
request_qty = return_qty = 0
if record.transfer_order_category_id.x_studio_allow_return_qty_diff:
  for line in record.stock_transfer_order_line:
    if line.product_id.categ_id not in categ_list:
      categ_list.append(line.product_id.categ_id)
  for categ in categ_list:
    request_qty = return_qty = 0
    for line in record.stock_transfer_order_line:
      if line.product_id.categ_id.id == categ.id:
        request_qty += line.product_uom_qty
    for line in record.stock_transfer_return_line:
      if line.product_id.categ_id.id == categ.id:
        return_qty += line.product_uom_qty
    if not request_qty >= return_qty:
      raise Warning(('The retun quantity must be equal or less than issue quantity %s') % (str(request_qty)))
    #if record.stock_transfer_return_line:
    #  if return_qty == 0:
    #    raise Warning(('The retun quantity must be equal to less than requested quantity of category %s') % (str(request_qty)))
#raise Warning(('The retun quantity cannot be greater than issue quantity %s and %s') % (str(issue_qty), str(rtn_qty)))


]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="de_stock_material_transfer_approvals.model_stock_transfer_order"/>
    <field name="name">Stock Not Found</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.temporarily_sequence_e1b8451e-c695-42b9-8193-d0502a811577" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}
if record.name == 'New':
  record.update({
    'name': record.custom_entry_type_id.sequence_id.next_by_id(),
  })

]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="de_custom_journal_entry.model_account_custom_entry"/>
    <field name="name">Temporarily Sequence Assignment</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.temporarily_stage_as_257bc637-e0d8-4053-a1c5-b6e303d34923" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}
stage_id = env['account.custom.entry.stage']
if not record.stage_id:
  stage_id = env['account.custom.entry.stage'].search([('custom_entry_type_ids','=',record.custom_entry_type_id.id),('stage_category','=','draft')],limit=1)
  record.update({
    'stage_id':stage_id.id,
  })



]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="de_custom_journal_entry.model_account_custom_entry"/>
    <field name="name">Temporarily Stage Assignment</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.transaction_selectio_74caa187-5fe4-4f89-ac02-f0355e29dc0e" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}


]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="de_stock_material_transfer_approvals.model_stock_transfer_order"/>
    <field name="name">Reserve for Project For MRF</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.update_advances_8fbabc00-07c4-4477-83cf-7e0ed3f24e99" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}

if record.hr_salary_advance_id.id:
  #if record.payment_state == 'paid':
  record.hr_salary_advance_id.update({
    'state': 'paid'
  })
  for line in record.hr_salary_advance_id.cash_line_ids:
    line.update({
      'state': 'paid'
    })

  for line in record.line_ids.filtered(lambda line: line.account_id.user_type_id.type in ('receivable', 'payable')):
    line.update({
      'name' : record.payment_reference or record.hr_salary_advance_id.name or ''
    })

]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="account.model_account_move"/>
    <field name="name">Update Advances &amp; Expenses</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.update_advances_invo_c5bfcffa-733a-42fa-b1d0-634038381ebd" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}

if record.purchase_line_id:
  if not record.project_id.id:
    record.update({
      'project_id': record.purchase_line_id.project_id.id
    })
  if not record.analytic_account_id.id:
    record.update({
      'analytic_account_id': record.purchase_line_id.account_analytic_id.id,
    })
  record.move_id.update({
    'x_studio_purchase_id': record.purchase_line_id.order_id.id,
  })
]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="account.model_account_move_line"/>
    <field name="name">Purchase Order line Data</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.update_advances_invo_f7102e26-c2a2-46ae-92f6-85f5502547be" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}

if record.move_id.move_type == 'in_invoice':
  if record.move_id.hr_salary_advance_id: #record.hr_salary_advance_line_id:
    record.update({
      'project_id':record.hr_salary_advance_line_id.x_studio_project_id.id,
      'employee_id':record.hr_salary_advance_line_id.employee_id.id,
    })
  #if record.account_id.internal_type == 'payable':


]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="account.model_account_move_line"/>
    <field name="name">Update Advances Invoices</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.update_data_32767936-fc2f-4f0b-bf71-b2ad4f850b26" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}
# record = model.browse(env.context['active_id'])

project_id = env['project.project']
if record.custom_entry_type_id.sequence_code == 'TB':
  product_id = record.custom_entry_type_id.default_product_id
  if record.customer_type == 'local' and record.t_travel_by == 'ticket':
    product_id = env['product.product'].search([('default_code','=','670200')],limit=1)
  elif record.customer_type == 'expat' and record.t_travel_by == 'ticket':
    product_id = env['product.product'].search([('default_code','=','655210')],limit=1)
  elif record.customer_type == 'local' and record.t_travel_by == 'vehicle':
    product_id = env['product.product'].search([('default_code','=','685200')],limit=1)
  elif record.customer_type == 'expat' and record.t_travel_by == 'vehicle':
    product_id = env['product.product'].search([('default_code','=','685200')],limit=1)
  
  for line in record.custom_entry_line:
    line.update({
      'product_id': product_id.id,
      'product_uom_id':product_id.uom_id.id,
      'price_unit': line.t_amount_travel, #round(line.t_amount_travel / line.number_of_days,2),
      'product_qty': 1, #line.number_of_days,
    })]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="de_custom_journal_entry.model_account_custom_entry"/>
    <field name="name">Update Data for Travel Bills</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.update_data_82f7684c-b3c1-48c6-b828-ed97e61fe20b" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}
# record = model.browse(env.context['active_id'])
  

project_id = env['project.project']
for line in record.custom_entry_line:
  if not line.product_id and record.custom_entry_type_id.default_product_id.id:
    line.update({
      'product_id': record.custom_entry_type_id.default_product_id.id,
      'product_uom_id': record.custom_entry_type_id.default_product_id.uom_id.id,
    })
    product_id = record.custom_entry_type_id.default_product_id.id
    product_uom_id = record.custom_entry_type_id.default_product_id.uom_id.id
  
  
]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="de_custom_journal_entry.model_account_custom_entry"/>
    <field name="name">Update Product Data</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.update_data_for_trav_353e9eef-4970-4918-a269-66651f537780" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}
# record = model.browse(env.context['active_id'])
project_id = env['project.project']
product_id = record.custom_entry_type_id.default_product_id
if record.custom_entry_type_id.sequence_code == 'FB':
  for line in record.custom_entry_line:
    if line.f_job_scope in ('0_rental_charges','5_ondemand_charges','8_replacement_charges'):
      product_id = env['product.product'].search([('default_code','=','685200')],limit=1)
    elif line.f_job_scope in ('1_ot_charges','2_salary_charges','4_management_fee'):
      product_id = env['product.product'].search([('default_code','=','685400')],limit=1)
    elif line.f_job_scope in ('6_petrol_charges'):
      product_id = env['product.product'].search([('default_code','=','685100')],limit=1)
    elif line.f_job_scope in ('7_toll_fee'):
      product_id = env['product.product'].search([('default_code','=','6855000')],limit=1)
    elif line.f_job_scope in ('4_management_fee'):
      product_id = env['product.product'].search([('default_code','=','685300')],limit=1)
    else:
      product_id = env['product.product'].search([('default_code','=','685300')],limit=1)
    line.update({
      'product_id': product_id.id,
      'product_uom_id':product_id.uom_id.id,
      'price_unit': line.f_amount, #round(line.f_amount / line.f_rent_days,2),
      'product_qty': 1,#line.f_rent_days,
    })
]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="de_custom_journal_entry.model_account_custom_entry"/>
    <field name="name">Update Data for Vehicle/Fleet Rent</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.update_data_for_trav_8dd4f2d3-24ad-4f98-a1ec-5fd365b03254" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}
# record = model.browse(env.context['active_id'])

#if record.custom_entry_type_id.sequence_code == 'PNR':
#  for line in record.custom_entry_line:
#    if line.price_unit == 0:
#      raise Warning(('Please enter price for (%s).') % (line.product_id.name))
#      break
om_charges = 0
tot_om_charges = 0
tot_penalty_amt = 0

for order in record:
  group_id = order.stage_id.group_id
  if not order.stage_id.allow_editing:
    if group_id:
      if not (group_id & env.user.groups_id):
        raise Warning(("You are not authorize to edit record at '%s'.", order.stage_id.name))
                        
#raise Warning(('The accumulated (PM+SLA) penalty is greater than 10% OM invoice.'))

penalty_entry_id = env['account.custom.entry']
if record.allow_penalty_adjustment == True:
  if record.custom_entry_type_id.sequence_code == 'PM':
    penalty_entry_id = env['account.custom.entry'].search([('partner_id','=',record.partner_id.id),('date_entry_month','=',record.date_entry_month),('custom_entry_type_id.sequence_code','=','SLA'),('date_entry_year','=',record.date_entry_year)],limit=1)
    for line in record.custom_entry_line:
      tot_om_charges += line.om_service_charges
      tot_penalty_amt += line.amount_penalty
    if ((penalty_entry_id.amount_total + tot_penalty_amt) > (tot_om_charges * (10/100))):
      raise Warning(('The accumulated (PM+SLA) penalty is greater than 10% OM invoice.'))
  elif record.custom_entry_type_id.sequence_code == 'SLA':
    penalty_entry_id = env['account.custom.entry'].search([('partner_id','=',record.partner_id.id),('date_entry_month','=',record.date_entry_month),('custom_entry_type_id.sequence_code','=','PM'),('date_entry_year','=',record.date_entry_year)],limit=1)
    for line in record.custom_entry_line:
      om_charges += line.om_service_charges 
    if ((penalty_entry_id.amount_total + tot_penalty_amt) > (tot_om_charges * (10/100))):
      raise Warning(('The accumulated (PM+SLA) penalty is greater than 10% OM invoice.'))
    ]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="de_custom_journal_entry.model_account_custom_entry"/>
    <field name="name">Update Data for Penalties</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.update_data_for_vehi_afbc43a6-53b3-4382-8651-65557118dab4" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}
# record = model.browse(env.context['active_id'])
project_id = env['project.project']
if record.custom_entry_type_id.sequence_code == 'AB':
  product_id = record.custom_entry_type_id.default_product_id.id
  product_uom_id = record.custom_entry_type_id.default_product_id.uom_id.id
  #product_id = record.custom_entry_type_id.default_product_id
  for line in record.custom_entry_line:
    line.update({
      'product_id': product_id,
      'product_uom_id':product_uom_id,
      'price_unit': line.h_amount / line.h_number_of_nights,
      'product_qty': line.h_number_of_nights,
    })]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="de_custom_journal_entry.model_account_custom_entry"/>
    <field name="name">Update Data for Accommodation Bills</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.update_delivery_date_b47dcf0e-1ae8-40a5-8de3-9bb231d18efd" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}

if record.state == 'done':
  if record.stock_transfer_order_id:
    if record.picking_type_id.id == record.stock_transfer_order_id.picking_type_id.id:
      record.stock_transfer_order_id.update({
        'date_delivered': record.date_done,
      })
    if record.picking_type_id.id == record.stock_transfer_order_id.picking_type_id.return_picking_type_id.id:
      record.stock_transfer_order_id.update({
        'date_returned': record.date_done,
      })


]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="stock.model_stock_picking"/>
    <field name="name">Update Delivery Dates</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.update_fuel_drawn_da_783c0e6b-521c-4f5b-a55a-96f2afce1100" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}

if record.custom_entry_type_id.sequence_code == 'FF':
  record.update({
    'currency_id':record.custom_entry_type_id.currency_id.id,
  })
  for line in record.custom_entry_line:
    if line.f_partner_id.name == 'Cash' or line.f_partner_id.ref == 'cash':
      supplier_id = record.partner_id.id
    else:
      supplier_id = line.f_partner_id.id
    line.update({
      'price_unit': line.f_price_unit,
      'product_qty': line.f_product_qty,
      'supplier_id': supplier_id,
      'f_closing_stock': line.f_opening_stock + line.f_product_qty,
      #'currency_id': record.custom_entry_type_id.currency_id.id,
    })

]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="de_custom_journal_entry.model_account_custom_entry"/>
    <field name="name">Update Fuel Filling data</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.update_fuel_drawn_da_7f89d128-bd44-4897-8c79-3988a46f6591" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}

rfi_days = onair_days = 0
rfi_price = onair_price = 0

month_diff = 0

invoice_id = env['account.move']
rfi_price = env['product.supplierinfo']
onair_price = env['product.supplierinfo']
onair_days = rfi_days = 0
task_id = env['project.task']
invoice_id = env['account.move']

start_date = end_date = False
if record.custom_entry_type_id.sequence_code == 'OM':
  start_date = datetime.datetime.strptime(str(record.date_entry_month + '/' + '01/' + record.date_entry_year),"%m/%d/%Y")
  next_month = start_date.replace(day=28) + datetime.timedelta(days=4)
  last_day_curr = datetime.timedelta(days=next_month.day)
  last_day_current_month = str(next_month - last_day_curr)
  end_date = datetime.datetime.strptime(str(last_day_current_month),"%Y-%m-%d %H:%M:%S")
  
  record.update({
    'currency_id':record.custom_entry_type_id.currency_id.id,
  })
  for line in record.custom_entry_line:
    onair_days = rfi_days = 0
    task_id = env['project.task'].search([('site_hoto','=',True),('site_id','=',line.project_id.id)],limit=1)
    project_id = env['project.project'].search([('id','=',line.project_id.id)],limit=1)
    
    rfi_price = env['product.supplierinfo'].search([('purchase_pricelist_id','=',line.custom_entry_id.partner_id.x_studio_purchase_pricelist_id.id),('product_tmpl_id','=',line.product_id.product_tmpl_id.id),('x_studio_tower_type','=',line.o_tower_type),('x_studio_om_charges_type','=','rfi')],limit=1).price 
    onair_price = env['product.supplierinfo'].search([('purchase_pricelist_id','=',line.custom_entry_id.partner_id.x_studio_purchase_pricelist_id.id),('product_tmpl_id','=',line.product_id.product_tmpl_id.id),('x_studio_tower_type','=',line.o_tower_type),('x_studio_om_charges_type','=','onair')],limit=1).price 
    

    #raise Warning(('RFI Price (%s)') % (str(abs(rfi_price))))
    if line.o_final_amount == 0:
      line.update({
        'o_final_amount': line.o_amount,
      })
    line.update({
      'product_id': line.o_product_id.id,
      'product_uom_id': line.o_product_id.uom_id.id,
      #'o_final_amount': line.o_amount,
      'price_unit': line.o_final_amount,
      'product_qty': 1,
      #'o_date_rfi': project_id.date_rfi,
      #'o_date_handover': project_id.date_handover,
      #'o_date_onair': project_id.date_onair,
      'currency_id': record.custom_entry_type_id.currency_id.id,
    })
    if not line.o_date_rfi:
      line.update({
        'o_date_rfi': project_id.date_rfi,
      })
    if not line.o_date_handover:
      line.update({
        'o_date_handover': project_id.date_handover,
      })
    if not line.o_date_onair:
      line.update({
        'o_date_onair': project_id.date_onair,
      })
    
    #days calcualtions
    date_start = start_date.strftime('%Y-%m-%d')
    date_end = end_date.strftime('%Y-%m-%d')
    
    if line.o_date_handover:
      handover_month = (line.o_date_handover.strftime("%Y")  + line.o_date_handover.strftime("%m").zfill(2))
    else:
      handover_month = 0
    doc_month = (start_date.strftime('%Y') + start_date.strftime('%m').zfill(2))
    month_diff = 0
    
    if line.o_date_handover:
      if not (line.o_date_handover.strftime("%m%Y") == start_date.strftime("%m%Y")):
        if int(handover_month) > int(doc_month):
          onair_days = 0
          rfi_days = 0
        else:
          if line.o_date_onair:
            if (line.o_date_onair.strftime("%m/%Y") == start_date.strftime("%m/%Y")):
              onair_days = (datetime.datetime.strptime(date_end,"%Y-%m-%d") - datetime.datetime.strptime(str(line.o_date_onair),"%Y-%m-%d")).days+1
              rfi_days = (datetime.datetime.strptime(str(line.o_date_onair),"%Y-%m-%d") - datetime.datetime.strptime(date_start,"%Y-%m-%d")).days
            elif not (line.o_date_onair.strftime("%m/%Y") == end_date.strftime("%m/%Y")):
              onair_days = int(end_date.strftime('%d'))
              rfi_days = 0
          else:
            onair_days = 0
            if line.o_date_rfi:
              if (line.o_date_rfi.strftime("%m/%Y") == end_date.strftime("%m/%Y")):
                rfi_days = (datetime.datetime.strptime(date_end,"%Y-%m-%d") - datetime.datetime.strptime(str(line.o_date_rfi),"%Y-%m-%d")).days+1
              else:
                rfi_days = int(end_date.strftime('%d'))
      elif (line.o_date_handover.strftime("%m/%Y") == end_date.strftime("%m/%Y")):
        if line.o_date_onair:
          if (line.o_date_onair.strftime("%m/%Y") == end_date.strftime("%m/%Y")):
            onair_days = (datetime.datetime.strptime(date_end,"%Y-%m-%d") - datetime.datetime.strptime(str(line.o_date_onair),"%Y-%m-%d")).days+1
            rfi_days = (line.o_date_onair - line.o_date_handover).days
          elif not (line.o_date_onair.strftime("%m/%Y") == end_date.strftime("%m/%Y")):
            onair_days = (datetime.datetime.strptime(date_end,"%Y-%m-%d") - datetime.datetime.strptime(str(line.o_date_handover),"%Y-%m-%d")).days+1
    else:
      onair_days = 0
      rfi_days = 0
    
    #if line.o_date_onair:
      #onair_days = int(line.o_date_onair.strftime("%m%Y"))
      #rfi_days = int(end_date.strftime("%m%Y"))
    # raise Warning((' (%s)') % (str(rfi_days)))
    line.update({
      'o_days_rfi': int(rfi_days),
      'o_days_onair': int(onair_days),
      'o_charges': ((rfi_price/int(end_date.strftime('%d'))) * line.o_days_rfi) + ((onair_price/int(end_date.strftime('%d'))) * line.o_days_onair),
    })
      
      
  #if record.stage_category == 'progress':
    #if record.stage_id.account_entry_type == 'entry':
      #record.sudo().create_journal_entry()
  if record.stage_id.stage_category == 'closed':
    invoice_id = env['account.move'].search([('custom_entry_id','=',record.id),('move_type','=','in_refund')],limit=1)
    if record.om_deduction_total > 0:
      if not invoice_id:
        record.sudo()._create_credit_invoice()
]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="de_custom_journal_entry.model_account_custom_entry"/>
    <field name="name">Update OM Data</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.update_fuel_drawn_da_cdebc6b1-9e1f-4f53-b4ca-878a3d4fcd78" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}

if record.custom_entry_type_id.sequence_code == 'FD':
  record.update({
    'currency_id':record.custom_entry_type_id.currency_id.id,
  })
  for line in record.custom_entry_line:
    if line.d_partner_id.name == 'Cash' or line.d_partner_id.ref == 'cash':
      supplier_id = record.partner_id.id
    else:
      supplier_id = line.d_partner_id.id
    line.update({
      'price_unit': line.d_price_unit,
      'product_qty': line.d_product_qty,
      'supplier_id': supplier_id,
      'currency_id': record.custom_entry_type_id.currency_id.id,
    })

]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="de_custom_journal_entry.model_account_custom_entry"/>
    <field name="name">Update Fuel Drawn data</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.update_fuel_filling__1bae3638-67a6-48f1-86bb-d171722b7abb" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}

if record.custom_entry_type_id.sequence_code == 'FF':
  record.update({
    'currency_id':record.custom_entry_type_id.currency_id.id,
  })
  for line in record.custom_entry_line:
    if line.f_partner_id.name == 'Cash' or line.f_partner_id.ref == 'cash':
      supplier_id = record.partner_id.id
    else:
      supplier_id = line.f_partner_id.id
    line.update({
      'price_unit': line.f_price_unit,
      'product_qty': line.f_product_qty,
      'supplier_id': supplier_id,
      'f_closing_stock': line.f_opening_stock + line.f_product_qty,
      #'currency_id': record.custom_entry_type_id.currency_id.id,
    })

]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="de_custom_journal_entry.model_account_custom_entry"/>
    <field name="name">Power &amp; Fuel Penalty</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.update_header_record_06c4b250-9338-431f-b07f-4a45b8a7e40c" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}
record.update({
  'currency_id': record.custom_entry_type_id.currency_id.id,
})


]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="de_custom_journal_entry.model_account_custom_entry"/>
    <field name="name">Update Header Record - 2bd</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.update_import_mode_1a3935da-88cd-44ca-ac16-15cbc2f71b96" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}

if record.custom_entry_type_id.sequence_code == 'EB':
  if record.account_entry_type == 'payment':
    record.update({
      'is_custom_entry_import': True,
    })


]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="de_custom_journal_entry.model_account_custom_entry"/>
    <field name="name">Update Import Mode</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.update_import_status_76282656-0de2-47b1-9d6d-b2ccc5bb968c" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}

record.update({
  'is_custom_entry_import': True,
})

]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="de_custom_journal_entry.model_account_custom_entry"/>
    <field name="name">Update Import Status on correction button - 2bd</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.update_line_from_req_89c69d27-00e8-45fa-a364-b3a12eaa3462" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}

if not record.project_id.id:
  record.update({
    'project_id': record.requisition_line_id.project_id.id,
    })
if not record.purchase_budget_line_id.id:
  record.update({
    'purchase_budget_line_id': record.requisition_line_id.purchase_budget_line_id.id,
    })

if not record.account_analytic_id.id:
  record.update({
    'account_analytic_id': record.requisition_line_id.account_analytic_id.id,
    })
    
#if not record.analytic_tag_ids:
#  record.update({
#    'analytic_tag_ids': [(6,0,record.requisition_line_id.analytic_tag_ids.id)],
#    })
]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="purchase.model_purchase_order_line"/>
    <field name="name">Update line from Requisition Line</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.update_name_field_fo_d806d347-c8bb-48fd-92ca-d4947117cb83" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}

if record.site_hoto:
  record.sudo().update({
    'name': str(record.project_id.name) + '-' + str(record.site_id.name) + '-' + str(record.date_handover) 
  })
project_id = env['project.project'].search([('id','=',record.site_id.id)],limit=1)
#project_id.update({
#  'x_studio_date_rfi': record.date_rfi,
#  'x_studio_date_airon': record.date_onair,
#  'x_studio_date_handedon': record.date_handover,
#})
#project_id.update({
  #'date_handover':record.date_handover,
  #'date_rfi': record.date_rfi,
  #'date_onair':record.date_onair,
  #'x_studio_date_rfi': record.date_rfi,
  #'x_studio_date_airon': record.date_onair,
  #'x_studio_date_handedon': record.date_handover,
#})

]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="project.model_project_task"/>
    <field name="name">Update Data for for HOTO Task</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.update_oem_serial_nu_bc7393dd-b980-472e-a08f-58cc08278a92" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}

if record.lot_id:
  record.lot_id.update({
    'oem_serial_no': record.oem_serial_no
  })


]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="stock.model_stock_move_line"/>
    <field name="name">Update OEM Serial Number</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.update_project_histo_e4f7ebf2-8c94-4b55-8a2f-fc6c0228de7c" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}
#record = model.browse(env.context['active_id'])

for line in record.custom_entry_line:
  line_values = ' '
  line_values += str(line.project_id.name) + '|' + str(line.amount_advanced) + '|' + str(line.e_paid_to) + '|' + str(line.date_bill_from) + '|' + str(line.date_bill_to) + '|' + str(line.meter_number) + '|' + str(line.opening_reading) + '|' + str(line.closing_reading) + '|' + str(line.additional_unit) + '|' + str(line.maintainence_fee) + '|' + str(line.hp_fee) + '|' + str(line.KHW_charges) + '|' + str(line.other_charges) + '|'  + str(line.note) + '|' + str(line.x_studio_exception) + '|' + str(line.x_studio_exception_remarks)
  line.update({
      'line_vals': line_values,
    })  
    
project_id = env['project.project']
#activate the button after making payment
ebh = env['account.custom.entry.ebh.line']
pricelist_id = env['product.supplierinfo']


current_unit = 0
if record.custom_entry_type_id.sequence_code == 'EB':
  #record.action_generate_excel()
  #update currency
  record.update({
    'currency_id':record.custom_entry_type_id.currency_id.id,
  })
      
  #update vendor portal for editting
  if record.account_entry_type == 'payment' or record.stage_id.stage_code == 'AP':
    record.update({
      'is_custom_entry_import': True,
      'allow_correction': True,
      'correction_reason': 'Please upload details',
    })
  elif record.stage_category != 'draft':
    record.update({
      'is_custom_entry_import': False,
      'allow_correction': False,
    })
      
  for line in record.custom_entry_line:
    #update quantity price
    
    line.update({
      'amount_total_electricity': line.maintainence_fee + line.hp_fee + line.KHW_charges + line.other_charges,
      'total_unit': (line.closing_reading - line.opening_reading) + line.additional_unit,
      'product_id': record.custom_entry_type_id.default_product_id.id,
      'product_uom_id': record.custom_entry_type_id.default_product_id.uom_id.id,
      'price_unit': (line.maintainence_fee + line.hp_fee + line.KHW_charges + line.other_charges),
      'product_qty': 1,
      #'currency_id': record.custom_entry_type_id.currency_id.id,
      
    })
    #update advance amount
    if record.custom_entry_type_id.expense_advance:
      #if record.stage_id not in (1,2):
      #  line.update({
      #    'amount_advanced': 0,
      #  })
      line.update({
        'advance_subtotal': line.amount_advanced,
      })
    
    if line.project_id:
      project_id = env['project.project'].search([('id','=',line.project_id.id)])
      #update Closing Units
      if record.stage_category == 'closed':
        project_id.update({
          'x_studio_last_reading': line.closing_reading,
        })
      #call for correction from vendor
      #if line.x_studio_exception == False:
      if line.opening_reading != project_id.x_studio_last_reading:
        line.update({
          'note': 'Opening Reading Mismatched',
        })
        record.update({
          'is_custom_entry_import': True,
          'allow_correction': True,
        })
      elif line.meter_number != project_id.x_studio_meter_no:
        if line.x_studio_exception:
          project_id.update({
          'x_studio_meter_no': line.meter_number,
        })
        else:
          line.update({
            'note': 'Meter Number Mismatched',
          })
          record.update({
            'is_custom_entry_import': True,
            'allow_correction': True,
          })
    #update actual units
    current_unit = line.total_unit
    total_amount = 0.0
    prices = env['product.supplierinfo'].search([('project_id','=',line.project_id.id)],order='min_qty asc')
    for price in prices:
      if current_unit > 0:
        if current_unit > price.min_qty:
          current_unit = (current_unit - price.min_qty)
          total_amount += (price.price * price.min_qty)
        else:
          total_amount += (price.price * current_unit)
          break
      else:
        break
    if line.total_unit > 0:
      line.update({
        'actual_KHW_charges': total_amount,
      })
    if record.stage_id.stage_code != 'AP' or record.stage_category == 'process':
      record.update({
      'is_custom_entry_import': False,
      'allow_correction': False,
    })
    
    #update advanced amount/forecasted amount
    #if record.stage_category == 'draft' or record.stage_id.prv_stage_id.stage_category == 'draft':
    #  if line.project_id.id:
    #    ebh.create({
    #      'custom_entry_id': record.id,
    #      'project_id': line.project_id.id,
    #      'amount': line.amount_advanced,
    #    })

  
  ]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="de_custom_journal_entry.model_account_custom_entry"/>
    <field name="name">Update Electricity Bill Data</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.update_sequence_2d0a9b0a-5b49-4efc-a0ce-e6de9c49a508" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}
if record.product_id.categ_id.sequence_id.id:
  record['name'] = record.product_id.categ_id.sequence_id.next_by_id()


]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="stock.model_stock_production_lot"/>
    <field name="name">Update Sequence</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.update_site_on_trans_3f0a2756-2f60-4c61-8a05-3f37a96e1e6a" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}
project_id = env['project.project']
if not record.project_id:
  project_id = env['project.project'].search([('location_id','=',record.location_dest_id.id)],limit=1)
  record.update({
    'project_id': project_id.id
  })

]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="de_stock_material_transfer.model_stock_transfer_order_line"/>
    <field name="name">Update site on Transfer Line</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.update_source_219fc483-d528-4201-a548-56dde1b0c051" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}
if record.x_studio_origin:
  record.update({
    'origin': record.x_studio_origin,
  })
else:
  record.update({
    'x_studio_origin': record.origin,
  })

]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="stock.model_stock_picking"/>
    <field name="name">Update Source</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.update_stock_locatio_b3fef215-3441-441b-8e88-bfc984f23504" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}

if record.stock_transfer_order_line_id:
  record.update({
    'location_dest_id': record.stock_transfer_order_line_id.location_dest_id.id,
  })
if record.stock_transfer_return_line_id:
  record.update({
    'location_id': record.stock_transfer_return_line_id.location_src_id.id,
  })


]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="stock.model_stock_move_line"/>
    <field name="name">Update Stock Location Transfer</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.update_stock_locatio_e91c6206-bcd5-4699-b429-c889f5fbdad8" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}

if record.stock_transfer_order_line_id:
  record.update({
    'location_dest_id': record.stock_transfer_order_line_id.location_dest_id.id,
  })
if record.stock_transfer_return_line_id:
  record.update({
    'location_id': record.stock_transfer_return_line_id.location_src_id.id,
  })


]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="stock.model_stock_move"/>
    <field name="name">Update Stock Location Transfer</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.yearly_constraint_on_2ce0ae20-63a9-410e-b6a1-158e9d80df2f" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}
days = 0
old_requisition_lines = env['purchase.requisition.line']
if record.next_stage_id.stage_category != 'draft':
  for line in record.line_ids:
  #old_requisition_lines = env['purchase.requisition.line'].search([('product_id','=',line.product_id.id),('project_id','=',line.project_id.id),('requisition_id.state','not in',['draft','cancel'])])
    old_requisition_lines = env['purchase.requisition.line'].search([('requisition_id','!=',record.id),('product_id','=',line.product_id.id),('project_id','=',line.project_id.id),('requisition_id.state','not in',['draft','cancel'])])
    if len(old_requisition_lines):
      for oline in old_requisition_lines:
        if line.requisition_id.ordering_date and oline.requisition_id.ordering_date:
          days = (line.requisition_id.ordering_date - oline.requisition_id.ordering_date).days
          if abs(days) < 365:
            if not record.x_studio_allow_submission_with_exception:
              raise Warning(('The Product %s has already issued to Site (%s) %s days ago') % (line.product_id.name, line.project_id.name, str(abs(days))))



]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="purchase_requisition.model_purchase_requisition"/>
    <field name="name">Yearly Constraint on Site Issuance Same Product</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
  <record id="studio_customization.yearly_constraint_on_d13522f0-c3e6-4e81-b318-f3185d2ad01a" model="ir.actions.server" context="{'studio': True}">
    <field name="binding_model_id" eval="False"/>
    <field name="binding_type">action</field>
    <field name="binding_view_types">list,form</field>
    <field name="child_ids" eval="[(6, 0, [])]"/>
    <field name="code"><![CDATA[# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
# To return an action, assign: action = {...}
days = 0
old_requisition_lines = env['purchase.requisition.line']
#if record.stage_id.next_stage_id.stage_category != 'draft':
for line in record.line_ids:
  #old_requisition_lines = env['purchase.requisition.line'].search([('product_id','=',line.product_id.id),('project_id','=',line.project_id.id),('requisition_id.state','not in',['draft','cancel'])])
  old_requisition_lines = env['purchase.requisition.line'].search([('requisition_id','!=',record.id),('product_id','=',line.product_id.id),('project_id','=',line.project_id.id),('requisition_id.state','not in',['draft','cancel'])])
  if len(old_requisition_lines):
    for oline in old_requisition_lines:
      if line.requisition_id.ordering_date and oline.requisition_id.ordering_date:
        days = (line.requisition_id.ordering_date - oline.requisition_id.ordering_date).days
        if abs(days) < 365:
          record.update({
            'x_studio_site_duplication_exception': True,
          })
          if line.x_studio_exception_remarks:
            record.update({
              'x_studio_allow_submission_with_exception': True,
              
            })


]]></field>
    <field name="crud_model_id" eval="False"/>
    <field name="help" eval="False"/>
    <field name="link_field_id" eval="False"/>
    <field name="model_id" ref="purchase_requisition.model_purchase_requisition"/>
    <field name="name">Yearly Constraint Submission Management</field>
    <field name="sequence">5</field>
    <field name="state">code</field>
  </record>
</odoo>
